package main;

import java.util.ArrayList;
import java.util.Scanner;

public class OfflineExercises {

	// Given a string, return a string where
	// for every char in the original string,
	// there are three chars.

	// multChar("The") → "TTThhheee"
	// multChar("AAbb") → "AAAAAAbbbbbb"
	// multChar("Hi-There") → "HHHiii---TTThhheeerrreee"

	public String multChar(String input) {
		
		
		
//		String a = "input()"; 
		
		String a = input;
		String output1 = "";
		
		ArrayList<String> update = new ArrayList<String>();

//		multiply.add(a.substring(0, 1));
//		multiply.add(a.substring(1, 2));
//		multiply.add(a.substring(2, 3));

		
		
		for (int i=0; i < a.length(); i++) {
			

			update.add(a.substring(i, i+1));
			update.add(a.substring(i, i+1));
			update.add(a.substring(i, i+1));
			
			output1 += a.substring(i, i+1) + a.substring(i, i+1) + a.substring(i, i+1);
//			System.out.print(a.substring(i, i+1));
//			System.out.print(a.substring(i, i+1));
//			System.out.print(a.substring(i, i+1));
			
			
		}
		
		return output1; 
			
	
		
		
	}
	
	// Return the string (backwards) that is between the first and last appearance
	// of "bert"
	// in the given string, or return the empty string "" if there is not 2
	// occurances of "bert" - Ignore Case

	// getBert("bertclivebert") → "evilc"
	// getBert("xxbertfridgebertyy") → "egdirf"
	// getBert("xxBertfridgebERtyy") → "egdirf"
	// getBert("xxbertyy") → ""
	// getBert("xxbeRTyy") → ""

	public String getBert(String input) {
		return "";
	}

	// Given three ints, a b c, one of them is small, one is medium and one is
	// large. Return true if the three values are evenly spaced, so the
	// difference between small and medium is the same as the difference between
	// medium and large. Do not assume the ints will come to you in a reasonable
	// order.

	// evenlySpaced(2, 4, 6) → true
	// evenlySpaced(4, 6, 2) → true
	// evenlySpaced(4, 6, 3) → false
	// evenlySpaced(4, 60, 9) → false

	public boolean evenlySpaced(int a, int b, int c) {
		
		int large = 0;
		int medium = 0;
		int small = 0;
		
		
		if ( ( (a > b) && (a > c) ) && (b > c) ) {
			large = a;
			medium = b;
			small = c;
			}
		
		else if ( ( (a > b) && (a > c) ) && (b < c) ) {
			large = a;
			medium = c;
			small = b;
			
		}
		
		else if((a > b) && (a < c)) {
			large = c;
			medium = a;
			small = b;
		}
		
		else if((a < b) && (a > c)) {
			large = b;
			medium = a;
			small = c;
		}
		
		else if(((a < b) && (a < c)) && (b > c) ) {
			large = b;
			medium = c;
			small = a;
		}
		
		else if(((a < b) && (a < c)) && (b < c) ) {
			large = c;
			medium = b;
			small = a;
		}
		
		else {
			return false;
		}
		
		
		if ((large - medium) == (medium - small)) {
			
			return true;
		}
		
		else {
			
			return false;
			
		}
		
	}

	// Given a string and an int n, return a string that removes n letters from the 'middle' of the string.
	// The string length will be at least n, and be odd when the length of the input is odd.

	// nMid("Hello", 3) → "Ho"
	// nMid("Chocolate", 3) → "Choate"
	// nMid("Chocolate", 1) → "Choclate"

	public String nMid(String input, int a) {
		
		
		int length = input.length();
		
		int remove = (length - 3) / 2;
		
		input.substring(0, 6);
		
		String new_string = length - 3
		
		
		
		return "";
	}

	// Given a string, return true if it ends in "dev". Ignore Case

	// endsDev("ihatedev") → true
	// endsDev("wehateDev") → true
	// endsDev("jh") → false
	// endsDev("everoyonehatesdevforreal") → false
	// endsDev("devisnotcool") → false

	public boolean endsDev(String input) {
		
		
	// convert string to lowercase
		
		String input2 = input.toLowerCase();
		
		Boolean input3 = input2.endsWith(dev);
		
		if (input3 = true) {
			
			return true;
			
		}
		
		else {
			
			return false;
		}
		
		
	}



	// Given a string, return the length of the largest "block" in the string.
	// A block is a run of adjacent chars that are the same.
	//
	// superBlock("hoopplla") → 2
	// superBlock("abbCCCddDDDeeEEE") → 3
	// superBlock("") → 0

	public int superBlock(String input) {
		return -1;

	}
	
	//given a string - return the number of times "am" appears in the String ignoring case -
	// BUT ONLY WHEN the word "am" appears without being followed or proceeded by other letters
	//
	//amISearch("Am I in Amsterdam") → 1
	//amISearch("I am in Amsterdam am I?") → 2
	//amISearch("I have been in Amsterdam") → 0

	public int amISearch(String arg1) {
		return 0;
		
	}
	
	//given a number 
	// if this number is divisible by 3 return "fizz"
	// if this number is divisible by 5 return "buzz"
	// if this number is divisible by both 3  and 5return "fizzbuzz"
	//
	//fizzBuzz(3) → "fizz"
	//fizzBuzz(10) → "buzz"
	//fizzBuzz(15) → "fizzbuzz"
	
	public String fizzBuzz(int arg1) {
		
		if (arg1 % 3 == 0 && arg1 % 5 == 0) {
			
			return "fizzbuzz";
		}
		
		else if (arg1 % 5 == 0) {
			
			return "buzz";
		}
		
		else if (arg1 % 3 == 0) {
			
			return "fizz";
		}
		
		else {
			
			return null;
			
		}
		
		
		
	}
	
	//Given a string split the string into the individual numbers present
	//then add each digit of each number to get a final value for each number
	// String example = "55 72 86"
	//
	// "55" will = the integer 10
	// "72" will = the integer 9
	// "86" will = the integer 14
	//
	// You then need to return the highest vale
	//
	//largest("55 72 86") → 14
	//largest("15 72 80 164") → 11
	//largest("555 72 86 45 10") → 15
	
	public int largest(String arg1) {
	
	
		return 0;
	}
//	}
	
//	public static String input() {
//		
//		Scanner s = new Scanner(System.in);
//		String input = s.nextLine();
//		return input;
//	}
//	
	
}
